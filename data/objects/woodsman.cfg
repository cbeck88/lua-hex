{
id: "woodsman",
is_strict: true,
always_active: true,

	"animation": [
		{
			"duration": 14,
			"frames": 14,
			"frames_per_row": 4,
			"id": "normal",
			"image": "units/woodsman-idle.png",
			"pad": 4,
			"rect": [2,2,73,73],
			"scale": 1,
		}
	],
	"editor_info": { 
		category: "human-peasants" 
	},
    
	properties: {
		_controller: { type: "obj controller_object" },

		my_base: { type: "object woodsman | null" },
		
		hex_height: { default: 72 },

		hex_size: "int :: int(hex_height*1.3)",

		hex_indent: "decimal :: (hex_size - hex_height)/decimal(hex_size)",
		hex_indent_inverse: "decimal :: 1.0 - hex_indent",

		step_size: {type: "decimal", default: .1 },

		new_x: { type: "int", default: 0 },
		new_y: { type: "int", default: 0 },

		current_x: {type: "decimal", default: 0},
		current_y: {type: "decimal", default: 0},

		update_from_base: "def() -> commands
		[
		if (my_base is null,
			destroy(),
			if (my_base.my_visual != me,
				destroy(),
				[
					set(new_x, (int<- my_base.loc[0])),
					set(new_y, (int<- my_base.loc[1])),
				]
			),
		)]",

		destroy: "def() ->commands [if (my_base and my_base.my_visual = me, set(my_base.my_visual, null)), remove_object(me)]",

		step: "def() -> commands
		[
/*			debug('current_x: ' + current_x + '  new_x: ' + new_x + '  step: ' + (-step_size * sign(current_x - new_x))),
			debug('current_y: ' + current_y + '  new_y: ' + new_y + '  step: ' + (-step_size * sign(current_y - new_y))),
			debug('abs: ' + abs(current_x - new_x)),
			debug('step_size: ' + step_size),
			debug('test: ' + (abs(current_x - new_x) > step_size)),*/
			if (abs(current_x - new_x) > step_size,
				add(current_x, -step_size * sign(current_x - new_x)),
				[
					set(current_x, new_x),
					if (abs(current_y - new_y) > step_size,
						add(current_y, -step_size * sign(current_y - new_y)),
						set(current_y, new_y))
				]
			),
		
			set(x, current_x * hex_size * ( hex_indent_inverse )),
			set(y, (current_y - (current_x / decimal(2))) * hex_height),
		]",
	},
	
	on_process: "step()",

	on_spawned: "
	[
		if (my_base,
			set(my_base.my_visual, me),
			debug('error spawning unit')
		),
		set(zorder, 2),
		bind_command(update_from_base),
	]",

	on_end_anim: "set(animation, 'normal')",
}
