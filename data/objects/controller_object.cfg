{
        id: "controller_object",
	next_animation: "'normal'",
	is_human: true,
	is_strict: true,
	always_active: true,

	properties: {
		_game: { type: "class game", init: "construct('game')" },
		_ignored: { type: "any" },
		update_tiles: "def() ->commands
		[
			debug('Updating tiles'),
			map (existing_tiles,
				if(game_value is null, value.destroy(),
					if (value.hex_type != game_value,
						[
							//debug('updating a hex: x:' + value.loc[0] + ' y:' + value.loc[1] + ' -- ' + value.hex_type + ' -> ' + game_value),
							// update does not work, unsure why
							//set(value.hex_type, game_value),
							//bind_command(value.update_tile),
							value.destroy(),
							spawn('tile', 0, 0, {loc: value.loc, hex_type: game_value, _controller: me}),
						],
						debug('no update needed at x:' + value.loc[0] + ' y:' + value.loc[1] + ' -- ' + value.hex_type)
					)
				)
				where game_value = _game.map[value.loc]
			),
			map (_game.map,
				if ([] = filter(existing_tiles,
					value.loc = k),
					[
						//debug(['Spawning a tile at: ', k]),
						spawn('tile', 0, 0, {loc: k, hex_type: v, _controller: me}),
					]
				)
				where k = key
				where v = value
			)
		]
		where existing_tiles = filter(level.chars, value is obj tile)
		",

		update_units: "def() ->commands
		[
			debug('Updating units'),
			map (existing_units, value.update_from_base()),
			map (_game.units, 
					if(value.my_visual is null,
						[
							debug('spawning unit'),
							spawn('woodsman', 0, 0, {my_base: value, _controller: me}),
						]
					)
			),
		]
		where existing_units = filter(level.chars, value is obj woodsman)
		",

		_end_turn_button: { type: "custom_obj end_turn_button | null" },

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		end_turn: "def() -> commands [debug('controller: end_turn') ,
						set(_ignored, _game.end_turn()),
						bind_command(update_tiles),
						bind_command(update_units)]",

		px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level_height))/900.0)",
	},

/*	lua: "
                local events = Anura.me.event_handlers
                local me = Anura.me
               
                local test_fn = function()
                        print('Hi')
                end
                 
                events.create = function()
                        print('create')
                        test_fn()

--			me.update_tiles()
                end
	",*/

	on_create: "[
		spawn('end_turn_button', 0, 0, {
			x: 8,
			y: level_height - px(320),
			_width: px(150),
			_height: px(60),
			_controller: me,
			_text: 'End Turn',
			zorder: 20000, //get_zorder('hud'),
			highlight: false,
		}, [
			set(_end_turn_button, child),
		]),

		update_tiles(),
		update_units(),
	]"
}
