{
        id: "controller_object",
	next_animation: "'normal'",
	is_human: true,
	is_strict: true,
	always_active: true,

	properties: {
		_game: { type: "class game", init: "construct('game')" },
		_ignored: { type: "any" },
		update_tiles: "def() ->commands
		[
			debug('Updating tiles'),
			map (existing_tiles,
				if( game_value is null, value.destroy(),
					if (value.hex_type != game_value,
						set(value.hex_type, game_value)))
				where game_value = _game.map[value.loc]
			),
			map (_game.map,
				if ([] = filter(existing_tiles,
					value.loc = k),
					[
						spawn('tile', k[0], k[1], {loc: k, hex_type: v, _controller: me}),
						debug(['Spawning a tile at: ', k]),
					]
				)
				where k = key
				where v = value
			)
		]
		where existing_tiles = filter(level.chars, value is obj tile)
",

		_end_turn_button: { type: "custom_obj end_turn_button | null" },

		level_width: "int :: level.dimensions[2]",
		level_height: "int :: level.dimensions[3]",

		end_turn: "def() -> commands [debug('controller: end_turn') ,
						if (_game.end_turn, set(_ignored, f()
						where f = function()->any <- _game.end_turn.execute))]",

		px: "def(int pixels) ->int if(res%2 = 1, res+1, res) where res = int((decimal(pixels)*decimal(level_height))/900.0)",
	},

/*	lua: "
                local events = Anura.me.event_handlers
                local me = Anura.me
               
                local test_fn = function()
                        print('Hi')
                end
                 
                events.create = function()
                        print('create')
                        test_fn()

--			me.update_tiles()
                end
	",*/

	on_create: "[
		debug('on_create'),
		spawn('end_turn_button', 0, 0, {
			x: 8,
			y: level_height - px(320),
			_width: px(150),
			_height: px(60),
			_controller: me,
			_text: 'End Turn',
			zorder: 20000, //get_zorder('hud'),
			highlight: false,
		}, [
			set(_end_turn_button, child),
		]),

		update_tiles()
	]"
}
