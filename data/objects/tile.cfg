{
	is_strict: true,
	always_active: true,
	"animation": [
		{
			"id": "main",
			"image": "tiles2.png",
			"rect": [1,1,47,29],
			frames: 30,
			frames_per_row: 5,
			duration: 1,
		},
	],
	"id": "tile",

	properties: {
		_controller: { type: "obj controller_object" },

		loc: { type: "Loc", default: [0,0] },

		mouseover: { type: "bool", default: false },

		destroy: "def() ->commands [remove_object(me)]",

		_last_render_key: { type: "any" },

		_render_key: "[hex_color, is_odd]",

		is_odd: "bool :: (loc[0] + loc[1])%2 = 1",

		hex_height: { default: 72 },

		hex_size: "int :: int(hex_height*1.3)",

		hex_indent: "decimal :: (hex_size - hex_height)/decimal(hex_size)",
		hex_indent_inverse: "decimal :: 1.0 - hex_indent",

		hex_type: { type: "string" },
		hex_color: "def() -> [decimal,decimal,decimal,decimal]
			 if (hex_type = 'blue', [0.2, 0.3, 0.7, 1],
			 if (hex_type = 'green', [0.2, 0.7, 0.3, 1],
					[ 0.5, 0.5, 0.5, 1])) ",

		render_tile: "def(int w, int h) ->map {
			id: 'fbo',
			image: 'fbo',
			fbo: query_cache(global_cache(64), [_render_key, w, h], c.render(w, h, [

				c.move_to(w*hex_indent, 0),
				c.line_to(w*hex_indent_inverse, 0),
				c.line_to(w, h*0.5),
				c.line_to(w*hex_indent_inverse, h),
				c.line_to(w*hex_indent, h),
				c.line_to(0, h*0.5),
				c.line_to(w*hex_indent, 0),

				c.set_source_rgba(color[0], color[1], color[2], color[3]),

				c.fill(),

			])where c = canvas())
			where color = hex_color(),

			x: 0, y: 0, w: w, h: h,
			scale: 1,
			frames: 1,
		}",
	},

	on_render: "if(_last_render_key != _render_key, [
		set(animation, render_tile(hex_size, hex_height)),
		set(x, x),
		set(y, y),
		set(_last_render_key, _render_key),
	])",

	on_spawned: "[[set(time_in_animation_delta, 0), fire_event('render')],
		set(x, loc[0] * hex_size * ( hex_indent_inverse )),
		set(y, (loc[1] - (loc[0] / decimal(2))) * hex_height)]",
	on_update_tile: "[set(zorder, loc[0]), fire_event('render')]",

	object_type: [
	],

	shader: {
		name: "tile_shader",
		draw: "if(parent, set(uniforms.do_highlight, parent.do_highlight))",
		create: "[set(uniforms.u_tex_map, 0), set(uniforms.do_highlight,0)]",
	},
}
