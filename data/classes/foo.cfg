{
	properties: {
		a : { type: "string", default:'a'},
		b : { type: "int", default:5},
		c : { type: "string", default:'b'},
		d : { type: "{ int -> class bar }", default: {}},
		e : { type: "[int]", default: [5,10,15]},
		f : { type: "class bar | null", default: null},
	},

	lua : '

local pretty_print_limit = 20
local max_depth = 7
local table_clever = true

-- imported global functions
local sub = string.sub
local push = table.insert
local pop = table.remove
local pack = table.pack
local floor = math.floor

local declared = {}

local jstack = {}

local ilua = { strict = true }

function ilua.join(tbl,delim,limit,depth)
    if not limit then limit = pretty_print_limit end
    if not depth then depth = max_depth end
    local n = #tbl
    local res = ""
    local k = 0
    -- very important to avoid disgracing ourselves with circular referencs...
    if #jstack > depth then
        return "..."
    end
    for i,t in ipairs(jstack) do
        if tbl == t then
            return "<self>"
        end
    end
    push(jstack,tbl)
    -- this is a hack to work out if a table is "list-like" or "map-like"
    -- you can switch it off with ilua.table_options {clever = false}
    local is_list
    if table_clever then
        local index1 = n > 0 and tbl[1]
        local index2 = n > 1 and tbl[2]
        is_list = index1 and index2
    end
    if is_list then
        for i,v in ipairs(tbl) do
            res = res..delim..ilua.val2str(v)
            k = k + 1
            if k > limit then
                res = res.." ... "
                break
            end
        end
    else
        for key,v in pairs(tbl) do
            if type(key) == "number" then
                key = "["..tostring(key).."]"
            else
                key = tostring(key)
            end
            res = res..delim..key.."="..ilua.val2str(v)
            k = k + 1
            if k > limit then
                res = res.." ... "
                break
            end            
        end
    end
    pop(jstack)
    return sub(res,2)
end

function ilua.val2str(val)
    local tp = type(val)
    if tp == "function" then
        return tostring(val)
    elseif tp == "table" then
        if val.__tostring  then
            return tostring(val)
        else
            return "{"..ilua.join(val,",").."}"
        end
    elseif tp == "string" then
        return "\'"..val.."\'"
    elseif tp == "number" then
	-- removed numeric precision features, but we might actually want these... might put them back
        return tostring(val)
    else
        return tostring(val)
    end
end

function ilua._pretty_print(...)
    local arg = pack(...)
    for i,val in ipairs(arg) do
        print(ilua.val2str(val))
    end
end

dump = ilua._pretty_print

print(Anura.me.a)
print(Anura.me.a)
print(Anura.me.b)
print(Anura.me.a)
print(Anura.me.c)

print(type(Anura.me.d))
print(type(Anura.me.e))

print(type(Anura.me.e[1]))
print(Anura.me.e[1])
print(Anura.me.e[2])
print(Anura.me.e[3])

print("a")
dump(Anura.me.a)

print("b")
dump(Anura.me.b)

print("c")
dump(Anura.me.c)

print("d")
dump(Anura.me.d)

print("e")
dump(Anura.me.e)

print("f")
dump(Anura.me.f)

temp = Anura.construct("bar")
print("temp")
dump(temp)

Anura.me.f = temp
Anura.me.d = { temp }

print("***")

print("d")
dump(Anura.me.d)

print("f")
dump(Anura.me.f)

--table.insert(Anura.me.d, Anura.construct("bar"))
',
}
